AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda for creating handle for a URI

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: handle
  HandleBaseUri:
    Type: String
    Description: The host part of Handle URIs
    Default: https://hdl.handle.net
  HandlePrefix:
    Type: String
    Description: Reference to Handle Prefix to use
    Default: 11250.1
  HandleDatabaseSecretName:
    Type: String
    Default: HandleDatabase
  EIPPrivateSubnet:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Private Subnet ID for workloads where we need a static IP
    Default: /NVA/EIP/PrivateSubnet/id
  EIPSecurityGroupId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Security Group ID for workloads where we need a static IP
    Default: /NVA/EIP/SecurityGroup/GroupId
  AllowedOrigins:
    Type: String
    Description: comma separated list of external clients that are allowed to contact the HTTP APIs, "*" indicates that all origins are allowed
    Default: '*'

Globals:
  Function:
    Timeout: 900
    MemorySize: 1798
    Runtime: java21
  Api:
    OpenApiVersion: 3.0.1
    Cors:
      AllowMethods: "'OPTIONS,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  ReadHandleDatabaseSecretsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:HandleDatabase-*"
              -
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  NvaHandleServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  NvaCreateHandleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NvaCreateHandleFunction}
      RetentionInDays: 180

  NvaCreateHandleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: operations
      Handler: no.sikt.nva.handle.CreateHandleHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - !GetAtt ReadHandleDatabaseSecretsManagedPolicy.PolicyArn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_HOST: !Ref ApiDomain
          HANDLE_PREFIX: !Ref HandlePrefix
          HANDLE_BASE_URI: !Ref HandleBaseUri
          HANDLE_DATABASE_SECRET_NAME: !Ref HandleDatabaseSecretName
      VpcConfig:
        SecurityGroupIds:
          - !Ref EIPSecurityGroupId
        SubnetIds:
          - !Ref EIPPrivateSubnet
      Events:
        CreateHandle:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaHandleServiceApi

  NvaUpdateHandleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NvaUpdateHandleFunction}
      RetentionInDays: 180

  NvaUpdateHandleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: operations
      Handler: no.sikt.nva.handle.UpdateHandleHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - !GetAtt ReadHandleDatabaseSecretsManagedPolicy.PolicyArn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_HOST: !Ref ApiDomain
          HANDLE_PREFIX: !Ref HandlePrefix
          HANDLE_BASE_URI: !Ref HandleBaseUri
          HANDLE_DATABASE_SECRET_NAME: !Ref HandleDatabaseSecretName
      VpcConfig:
        SecurityGroupIds:
          - !Ref EIPSecurityGroupId
        SubnetIds:
          - !Ref EIPPrivateSubnet
      Events:
        CreateHandle:
          Type: Api
          Properties:
            Path: /{prefix}/{suffix}
            Method: put
            RestApiId: !Ref NvaHandleServiceApi

  NvaCreateHandleBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref NvaHandleServiceApi
      Stage: !Ref NvaHandleServiceApi.Stage